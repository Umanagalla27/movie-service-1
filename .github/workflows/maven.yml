# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven & Docker

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # ✅ Build Maven project located inside subfolder
    - name: Build with Maven
      run: mvn -B package --file movie-service/pom.xml

    # ✅ Build Docker image using Spring Boot buildpacks
    - name: Build Docker image
      run: mvn -B spring-boot:build-image -DskipTests --file movie-service/pom.xml

    - name: DockerHub login
      env:
        DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
        DOCKERHUB_PWD: ${{ secrets.DOCKERHUB_PWD }}
      run: echo "${DOCKERHUB_PWD}" | docker login -u "${DOCKERHUB_USER}" --password-stdin

    - name: Tag & Push Docker image
      env:
        DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
      run: |
        IMAGE_NAME=${DOCKERHUB_USER}/movie-service
        COMMIT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-7)

        docker tag movie-service:0.0.1-SNAPSHOT $IMAGE_NAME:latest
        docker tag movie-service:0.0.1-SNAPSHOT $IMAGE_NAME:${COMMIT_SHA}

        docker push $IMAGE_NAME:latest
        docker push $IMAGE_NAME:${COMMIT_SHA}
